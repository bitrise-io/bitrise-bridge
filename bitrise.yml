format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_BIN_NAME: bitrise-bridge
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/${BITRISE_BIN_NAME}/releases

workflows:

  _install_test_tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck
            # Go lint
            go get -u github.com/golang/lint/golint

  _test:
    steps:
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go test $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Vet
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go vet $GOLIST_WITHOUT_VENDOR
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Integration Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go build -o _tmp/test-bin

            cmd_host_param='none'

            # Run with workflow param
            _tmp/test-bin --command-host="$cmd_host_param" run -c Zm9ybWF0X3ZlcnNpb246IDEuMC4wDQpkZWZhdWx0X3N0ZXBfbGliX3NvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2JpdHJpc2UtaW8vYml0cmlzZS1zdGVwbGliLmdpdA0KDQp0cmlnZ2VyX21hcDoNCi0gcGF0dGVybjogInQvMSINCiAgaXNfcHVsbF9yZXF1ZXN0X2FsbG93ZWQ6IHRydWUNCiAgd29ya2Zsb3c6IHRlc3QNCg0Kd29ya2Zsb3dzOg0KICB0ZXN0Og0KICAgIHN0ZXBzOg0KICAgIC0gc2NyaXB0Og0KICAgICAgICBpbnB1dHM6DQogICAgICAgIC0gY29udGVudDogfC0NCiAgICAgICAgICAgICMhL2Jpbi9iYXNoDQogICAgICAgICAgICBzZXQgLWV4DQoNCiAgICAgICAgICAgIGVjaG8gIkhpIC0gVGVzdCEiDQoNCiAgICAgICAgICAgICMNCiAgICAgICAgICAgIHVuYW1lIC1zDQogICAgICAgICAgICAjDQogICAgICAgICAgICB1bmFtZSAtbQ0KICAgICAgICAgICAgIw0KICAgICAgICAgICAgdW5hbWUgLWENCg0KICAgICAgICAgICAgZXhpdCAwDQo= --workflow test

            # Run with JSON (base64) param
            _tmp/test-bin --command-host="$cmd_host_param" run -c Zm9ybWF0X3ZlcnNpb246IDEuMC4wDQpkZWZhdWx0X3N0ZXBfbGliX3NvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2JpdHJpc2UtaW8vYml0cmlzZS1zdGVwbGliLmdpdA0KDQp0cmlnZ2VyX21hcDoNCi0gcGF0dGVybjogInQvMSINCiAgaXNfcHVsbF9yZXF1ZXN0X2FsbG93ZWQ6IHRydWUNCiAgd29ya2Zsb3c6IHRlc3QNCg0Kd29ya2Zsb3dzOg0KICB0ZXN0Og0KICAgIHN0ZXBzOg0KICAgIC0gc2NyaXB0Og0KICAgICAgICBpbnB1dHM6DQogICAgICAgIC0gY29udGVudDogfC0NCiAgICAgICAgICAgICMhL2Jpbi9iYXNoDQogICAgICAgICAgICBzZXQgLWV4DQoNCiAgICAgICAgICAgIGVjaG8gIkhpIC0gVGVzdCEiDQoNCiAgICAgICAgICAgICMNCiAgICAgICAgICAgIHVuYW1lIC1zDQogICAgICAgICAgICAjDQogICAgICAgICAgICB1bmFtZSAtbQ0KICAgICAgICAgICAgIw0KICAgICAgICAgICAgdW5hbWUgLWENCg0KICAgICAgICAgICAgZXhpdCAwDQo= --json-params-base64 eyJ3b3JrZmxvdyI6InRlc3QifQ==

            # Trigger with workflow param
            _tmp/test-bin --command-host="$cmd_host_param" trigger -c Zm9ybWF0X3ZlcnNpb246IDEuMC4wDQpkZWZhdWx0X3N0ZXBfbGliX3NvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2JpdHJpc2UtaW8vYml0cmlzZS1zdGVwbGliLmdpdA0KDQp0cmlnZ2VyX21hcDoNCi0gcGF0dGVybjogInQvMSINCiAgaXNfcHVsbF9yZXF1ZXN0X2FsbG93ZWQ6IHRydWUNCiAgd29ya2Zsb3c6IHRlc3QNCg0Kd29ya2Zsb3dzOg0KICB0ZXN0Og0KICAgIHN0ZXBzOg0KICAgIC0gc2NyaXB0Og0KICAgICAgICBpbnB1dHM6DQogICAgICAgIC0gY29udGVudDogfC0NCiAgICAgICAgICAgICMhL2Jpbi9iYXNoDQogICAgICAgICAgICBzZXQgLWV4DQoNCiAgICAgICAgICAgIGVjaG8gIkhpIC0gVGVzdCEiDQoNCiAgICAgICAgICAgICMNCiAgICAgICAgICAgIHVuYW1lIC1zDQogICAgICAgICAgICAjDQogICAgICAgICAgICB1bmFtZSAtbQ0KICAgICAgICAgICAgIw0KICAgICAgICAgICAgdW5hbWUgLWENCg0KICAgICAgICAgICAgZXhpdCAwDQo= --pattern t/1

  install:
    before_run:
    - _test
    steps:
    - script:
        title: Test & install
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go install

  godeps-update:
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Install dependencies
            go get -u github.com/tools/godep
            # Cleanup
            rm -rf ./Godeps
            rm -rf ./vendor
            # Go get deps
            go get -t -d ./...
            go get golang.org/x/sys/unix
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            # save
            godep save ./...

  ci:
    before_run:
    - _install_test_tools
    - _test
    steps:
    - slack:
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME} - CI - OK
        - from_username_on_error: ${BITRISE_BIN_NAME} - CI - ERROR
        - emoji: ":white_check_mark:"
        - emoji_on_error: ":no_entry_sign:"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  create-release:
    before_run:
    - _test
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
            puts " * changelog_path: #{changelog_path}"
            template_content = File.read("./_changelogs/template.md")
            changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            File.open(changelog_path, "w") do |f|
              f.write(changelog_content)
            end
        - runner_bin: ruby

  create-release-with-docker-compose:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            docker-compose build --no-cache app
            # docker-compose build app
            docker-compose run --rm app bitrise run create-release
